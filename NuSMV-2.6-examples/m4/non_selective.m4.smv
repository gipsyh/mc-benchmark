-- (C) 2002 Roger Villemaire villemaire.roger@uqam.ca
-- We model a window retrasmission protocol (Go-back-N).

-- REMARK Acknowledge N is an ack for all frames of Id strictly before N 
--        in the window.

-- The window beginning (WB) is the Id of the first non-acknowledge frame.
-- The window end (WE) is one more (modulo the number of Ids) than the Id of
-- the last non-acklowledge frame.

-- There are two cases to consider
-- 1) WB <= WE
--    Example with 6 Ids
--                |  |  |  |  |  | 
--                0  1  2  3  4  5 
--                   |        |
--                   WB       WE
--    Here the window contains frames 1,2,3
--
-- 2) WB > WE
--    Example with 6 Ids
--                |  |  |  |  |  | 
--                0  1  2  3  4  5 
--                   |        |
--                   WE       WB
--    Here the window contains frames 4,5,0
--
-- VERIFICATION STRATEGY: We want to show that it is sufficient to have one
-- Id more than the size of the window in order to distinguis between a
-- transmission and a re-transmission.
-- First we need to have at least as much Ids than the size of the window
-- for the meaning of the ack to be unambiguous, since if we had twice the
-- same Id inside the window, we coun't know to which an ack apply.
-- Secondly we don't have to modelize the data. It is sufficient to check
-- that as long that an Id is inside the window the receiver cannot receive
-- a new frame with this same Id (if it appends it must be a re-transmission).
--
dnl-- This file must be proceeded by m4.
dnl-- With NuSMV you must use the following options
dnl-- -m4 -m4options "-IFULL_PATH_OF_THE_NuSMV.m4_FILE"
dnl-- NuSMV.m4 is normally in this directory.
include(NuSMV.m4)dnl
dnl Put a warning message in the file if m4 is directly used.
nusmv_m4_auto_gen dnl
define([:MAX_WS:],[:2:])dnl MAX_WS is the maximal size of the window. Here it is hard coded to 2, 
                    dnl but if you comment out this definition (with either dnl or --) you can
                    dnl give the value to m4 with the following option
                    dnl  -m4 -m4options "-IFULL_PATH_OF_THE_NuSMV.m4_FILE -DMAX_WS=2"
define([:No_Id:],[:3:])dnl  Number of Ids. See the above comment to give this value directly 
                   dnl  to NuSMV.
dnl -- We check here that the number of Ids is at least equal to the size of the window.
ifelse(eval(No_Id < MAX_WS),[:1:],[:errprint(__file__:eval(__line__ - 5):The number of Ids must be at least equal to the size of the window in order to have non-ambiguous acknowledge.
)m4exit(1):])
dnl
define([:ID_RANGE:],[:-1..:]eval(No_Id-1))dnl -- the range 0..(No_Id-1) for valid Ids and
dnl                                      --  -1 when the buffer is empty
dnl
define([:VAL_ID_RANGE:],[:0..:]eval(No_Id-1))dnl --  valid Ids.


--------------------------------------------------------------------------
-- SENDER
--------------------------------------------------------------------------
MODULE sender(send_channel,receive_channel)
-- send_channel    : ID_RANGE;  -- just the frame id
-- receive_channel : ID_RANGE;  -- the ack number
VAR
  WB : ID_RANGE; -- the first frame awaiting an ack
  WE : ID_RANGE; -- one more than the last frame awaiting an ack
DEFINE
  -- either 0 is in the window or it is not.
  ack_in_window := (receive_channel != -1) & -- non-empty
    ((WB <= WE &
      receive_channel >  WB &
      receive_channel <= WE
     ) |
     (WB > WE &
      (receive_channel >  WB |
       receive_channel <= WE
      )
     )
    );

  window_size := 
    case
      ack_in_window : (WE - receive_channel) mod No_Id;
      TRUE          : (WE - WB) mod No_Id;
    esac;

  new_transmission := window_size < MAX_WS; 
    -- true if we can increase the window size so if we can transmit something new.
ASSIGN
  -- At first the window is empty.
  init(WB) := 0;
  init(WE) := 0;

  next(WB) := 
    case
      ack_in_window : receive_channel; -- we have an ack, so we move the beginning 
                                       -- of the window.
      TRUE          : WB;
    esac;

  next(WE) := 
    case
      new_transmission : (WE + 1) mod No_Id; 
      -- the window is not of maximal size, we can send something.
      TRUE             : WE;
    esac;

  next(send_channel) := 
    case
      -- the window is not of maximal size, we can send something.
      new_transmission : WE;
      -- if the window is full we re-transmit the first non-acknowledged frame.
      TRUE             : WB;
    esac;

  -- Empty receive channel
  next(receive_channel) := -1;

FAIRNESS
    running

-- To check that every Id will occurs infinitely often.
forlooprange(I,VAL_ID_RANGE,[:[:
LTLSPEC
  (G F (new_transmission & WE = I)):]:])



--------------------------------------------------------------------------
-- RECEIVER
-------------------------------------------------------------------------
MODULE receiver(send_channel,receive_channel)
-- send_channel    : ID_RANGE; -- ack
-- receive_channel : ID_RANGE; -- frame Id
VAR
  expected_frame : VAL_ID_RANGE; -- the frame we are waiting for.
  send_ack       : boolean; -- if true we send an ack right now.
  -- The fact of posponing the ack simulates the simultaneous travel 
  -- of some number of frames toward the receiver. Is this really dishonest?
DEFINE
  receive        := receive_channel = expected_frame;
  received_frame := receive_channel;

ASSIGN
  init(expected_frame) := 0;

  next(expected_frame) := 
    case
      receive  : (expected_frame + 1) mod No_Id;
      TRUE     : expected_frame;
    esac;

  next(send_channel) := 
    -- We pospone the ack in order to simulate a delay
    -- between the sender and the receiver.
    case
      receive & send_ack : (expected_frame + 1) mod No_Id;
      -- ack for the receive now.
     !receive & send_ack : expected_frame; 
      -- ack for the last received frame.
      TRUE               : send_channel;
    esac;  

  -- empty receive channel
  next(receive_channel) := -1;

FAIRNESS
  running & send_ack -- we don't indefinitely pospone acks.

--------------------------------------------------------------------------
-- MAIN
-------------------------------------------------------------------------
MODULE main
VAR
  channel  : ID_RANGE; 
  ack      : ID_RANGE; 
  sender   : process sender(channel,ack);
  receiver : process receiver(ack,channel);
ASSIGN
  init(channel) := -1; -- empty
  init(ack)     := -1; -- empty


dnl -- This m4 macro expands to a true NuSMV expression if $1 (its first 
dnl -- argument) is in the window.
dnl -- The BEGIN and END mark are there in case you manually use m4 and want
dnl -- to know from were the expansion came from.
define([:IN_WINDOW:],[:
   -- BEGIN [:IN_WINDOW:]($1)
   ((sender.WB <= sender.WE &
     $1 >= sender.WB &
     $1 <  sender.WE
    ) 
    |
    (sender.WB >  sender.WE &
     ($1 >= sender.WB |
      $1 <  sender.WE)
     )
   )
   -- END [:IN_WINDOW:]($1)
:])

-- Check that if frame I is transmitted it will stay in the window as long 
-- that it is not received.
forlooprange(I,VAL_ID_RANGE,[:[:
LTLSPEC
  G ( -- I is transmitted
      sender.running & 
      sender.new_transmission & 
      sender.WE = I ->
-- I stays in window
    X (IN_WINDOW(I)
    U
-- up to the moment it is received
    (receiver.running & receiver.receive & receiver.received_frame = I)))
:]:])

-- If I is in the window we cannot reuse this Id to send something new.
forlooprange(I,VAL_ID_RANGE,[:[:
LTLSPEC
  G ( !( -- I is transmitted
      sender.running & 
      sender.new_transmission & 
      sender.WE = I &
-- I is in the window
    IN_WINDOW(I)))
:]:])

dnl ACK_FOR(ack,I) is a m4 macro which expands to a true NuSMV expressiond
dnl if ack is an acknowledge for I.
dnl Pre-conditions:  ack must be in the window (according to ack_in_window) and
dnl                  I must be in the window (according to IN_WINDOW).
define([:ACK_FOR:],[:
  -- BEGIN [:ACK_FOR:]($1,$2)
  -- window beginning before window end
  ((sender.WB <= sender.WE -> $2 < $1)
   |
    -- end before beginning and ack before end
   ((sender.WB > sender.WE &
     $1 <= sender.WE ) -> (($2 < $1) 
                           | 
                           ( $2 >= sender.WB )
                          )
   )
   |
  -- end before beginning and ack > debut
   ((sender.WB > sender.WE &
     $1 > sender.WE ) -> ($2 < $1 & $2 >= sender.WB) 
   )
  )
  -- END [:ACK_FOR:]($1,$2)
:])
  
-- A frame is received at most once as a new frame.
forlooprange(I,VAL_ID_RANGE,[:[:
LTLSPEC
  G ( -- I is transmitted
      sender.running &
      sender.new_transmission & 
      sender.WE = I ->
-- I stay in window
     X(IN_WINDOW(I)
       U
      -- as long it is not received
       (receiver.running & receiver.receive & receiver.received_frame = I &
        X (-- we don't get this frame again...
           !(receiver.running & receiver.receive & 
             receiver.received_frame = I
	    )
            U
            --  ...before we get the ack
            (sender.running & sender.ack_in_window &ACK_FOR(ack,I)
            )
          )
       )
      )
    )
:]:])
