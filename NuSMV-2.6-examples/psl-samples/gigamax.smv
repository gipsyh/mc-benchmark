MODULE cache-device

VAR
  state : {invalid,shared,owned};


DEFINE
  readable := ((state = shared) | (state = owned)) & !waiting;
  writable := (state = owned) & !waiting;

ASSIGN
  init(state) := invalid;
  next(state) :=
    case
      abort : state;
      master :
        case
          CMD = read-shared        : shared;
          CMD = read-owned         : owned;
          CMD = write-invalid      : invalid;
          CMD = write-resp-invalid : invalid;
          CMD = write-shared       : shared;
          CMD = write-resp-shared  : shared;
          TRUE : state;
        esac;
      !master & state = shared & (CMD = read-owned | CMD = invalidate) :
         invalid;
      state = shared : {shared,invalid};
      TRUE : state;
    esac;

DEFINE
  reply-owned := !master & state = owned;

VAR
  snoop : {invalid,owned,shared};

ASSIGN
  init(snoop) := invalid;
  next(snoop) := 
    case
      abort : snoop;
      !master & state = owned & CMD = read-shared : shared;
      !master & state = owned & CMD = read-shared : owned;
      master & CMD = write-resp-invalid : invalid;
      master & CMD = write-resp-shared  : invalid;
      TRUE : snoop;
    esac;

MODULE bus-device

VAR
  master  : boolean;
  cmd : {idle,read-shared,read-owned,write-invalid,write-shared,
	 write-resp-invalid,write-resp-shared,invalidate,response};
  waiting : boolean;
  reply-stall : boolean;

ASSIGN
  init(waiting) := FALSE;
  next(waiting) :=
    case
      abort : waiting;
      master  & CMD = read-shared        : TRUE;
      master  & CMD = read-owned         : TRUE;
      !master & CMD = response           : FALSE;
      !master & CMD = write-resp-invalid : FALSE;
      !master & CMD = write-resp-shared  : FALSE;
      TRUE : waiting;
    esac;

DEFINE
  reply-waiting := !master & waiting;
  abort := REPLY-STALL
           | ((CMD = read-shared | CMD = read-owned) & REPLY-WAITING);

MODULE processor(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL)
ISA bus-device
ISA cache-device

ASSIGN
  cmd :=
    case
      master & state = invalid : {read-shared,read-owned};
      master & state = shared  : read-owned;
      master & state = owned & snoop = owned : write-resp-invalid;
      master & state = owned & snoop = shared : write-resp-shared;
      master & state = owned & snoop = invalid : write-invalid;
      TRUE : idle;
    esac;

MODULE memory(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL)
VAR
  master : boolean;
  cmd : {idle,read-shared,read-owned,write-invalid,write-shared,
	 write-resp-invalid,write-resp-shared,invalidate,response};
  busy : boolean;
  reply-stall : boolean;


DEFINE
  reply-owned := FALSE;
  reply-waiting := FALSE;
  abort := REPLY-STALL
          | (CMD = read-shared | CMD = read-owned) & REPLY-WAITING
	  | (CMD = read-shared | CMD = read-owned) & REPLY-OWNED;

ASSIGN
  init(busy) := FALSE;
  next(busy) :=
    case
      abort : busy;
      master & CMD = response : FALSE;
      !master & (CMD = read-owned | CMD = read-shared) : TRUE;
      TRUE : busy;
    esac;
  cmd :=
    case
      master & busy : {response,idle};
      TRUE : idle;
    esac;
  reply-stall :=
    case
      busy & (CMD = read-shared | CMD = read-owned
	      | CMD = write-invalid | CMD = write-shared
	      | CMD = write-resp-invalid | CMD = write-resp-shared) : TRUE;
      TRUE : {FALSE,TRUE};
    esac;

MODULE main
VAR
  CMD : {idle,read-shared,read-owned,write-invalid,write-shared,
	   write-resp-invalid,write-resp-shared,invalidate,response};
  p_0 : processor(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL);
  p_1 : processor(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL);
  p_2 : processor(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL);
  m : memory(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL);

DEFINE
  REPLY-OWNED := p_0.reply-owned | p_1.reply-owned | p_2.reply-owned;
  REPLY-WAITING := p_0.reply-waiting | p_1.reply-waiting | p_2.reply-waiting;
  REPLY-STALL := p_0.reply-stall | p_1.reply-stall | p_2.reply-stall |
	         m.reply-stall;

ASSIGN
  CMD := 
    case
      p_1.cmd = idle & p_2.cmd = idle & m.cmd = idle : p_0.cmd;
      p_0.cmd = idle & p_2.cmd = idle & m.cmd = idle : p_1.cmd;
      p_0.cmd = idle & p_1.cmd = idle & m.cmd = idle : p_2.cmd;
      p_0.cmd = idle & p_1.cmd = idle & p_2.cmd = idle : m.cmd;
      TRUE : {idle,read-shared,read-owned,write-invalid,write-shared,
	   write-resp-invalid,write-resp-shared,invalidate,response};
    esac;

ASSIGN
  p_0.master := {FALSE,TRUE};
  p_1.master :=
    case
      p_0.master : FALSE;
      TRUE : {FALSE,TRUE};
    esac;
  p_2.master :=
    case
      p_0.master | p_1.master : FALSE;
      TRUE : {FALSE,TRUE};
    esac;
  m.master :=
    case
      p_0.master | p_1.master | p_2.master : FALSE;
      TRUE : {FALSE,TRUE};
    esac;

SPEC
  AG EF (p_0.readable)

SPEC
  AG EF (p_0.writable)

SPEC
  AG !(p_0.writable & p_1.writable)

PSLSPEC
  AG EF (p_0.readable);

PSLSPEC
  AG EF (p_0.writable);

PSLSPEC
  AG EF (p_1.readable);

PSLSPEC
  AG EF (p_1.writable);

PSLSPEC
  AG EF (p_2.readable);

PSLSPEC
  AG EF (p_2.writable);

PSLSPEC
--  AG forall i in {0:2}: (EF p[i].readable);
AG((EF p_0.readable) & (EF p_1.readable) & (EF p_2.readable));

PSLSPEC
--  AG forall i in {0:2}: EF p[i].writable;
  AG ((EF p_0.writable) & (EF p_1.writable) & (EF p_2.writable));

PSLSPEC
  AG !(p_0.writable & p_1.writable);

PSLSPEC
  never (p_0.writable & p_1.writable);

PSLSPEC
  always !(p_0.writable & p_1.writable);

PSLSPEC
--  never forall i in {0:1}: p[i].writable;
  never (p_0.writable & p_1.writable) ;

PSLSPEC
--  never forall i in {1:2}: p[i].writable;
  never (p_1.writable & p_2.writable) ;

PSLSPEC
--  never forall i in {0,2}: p[i].writable;
  never (p_0.writable & p_2.writable) ;

