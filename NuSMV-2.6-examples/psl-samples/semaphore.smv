MODULE main
VAR
  semaphore : boolean;
  proc_1 : process user(semaphore);
  proc_2 : process user(semaphore);

ASSIGN
  init(semaphore) := FALSE;
SPEC
  AG (proc_1.state = entering -> AF proc_1.state = critical)

SPEC
  AG (proc_2.state = entering -> AF proc_2.state = critical)

PSLSPEC
-- forall i in {1:2}: (AG ((proc[i].state = entering) -> AF (proc[i].state = critical))) ;
 (AG ((proc_1.state = entering) -> AF (proc_1.state = critical))) & (AG ((proc_2.state = entering) -> AF (proc_2.state = critical)));

PSLSPEC
-- forall i in {1:2}: (always ((proc[i].state = entering) -> eventually! (proc[i].state = critical))) ;
  (always ((proc_1.state = entering) -> eventually! (proc_1.state = critical))) & (always ((proc_2.state = entering) -> eventually! (proc_2.state = critical)));


MODULE user(semaphore)
VAR
  state : {idle,entering,critical,exiting};
ASSIGN
  init(state) := idle;
  next(state) := 
    case 
      state = idle : {idle,entering};
      state = entering & !semaphore : critical;
      state = critical : {critical,exiting};
      state = exiting : idle;
      TRUE : state;
    esac;
  next(semaphore) := 
    case
      state = entering : TRUE;
      state = exiting : FALSE;
      TRUE : semaphore;
    esac;
FAIRNESS
  running
