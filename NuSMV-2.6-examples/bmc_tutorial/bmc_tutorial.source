echo Setting up BMC module...
go_bmc

echo Checking a simple safety false property: we expect a counterexample at bound 5...
check_ltlspec_bmc -p "G (y=4 -> X y=6)"

echo Changing problem length to 4...
set bmc_length 4
echo Checking again the property: no counterexample may be found...
check_ltlspec_bmc -p "G (y=4 -> X y=6)"

echo Changing problem length to a valid value (5) to find one counterexample ...
set bmc_length 5
check_ltlspec_bmc_onepb -p "G (y=4 -> X y=6)"

set bmc_length 10
echo Checking the liveness false property "!G F y =2"...
check_ltlspec_bmc -p "!G F y=2"

echo Changing l and k to invalidate matching of model and counterexample structures
set bmc_length 9
set bmc_loopback 0
check_ltlspec_bmc_onepb -p "!G F y=2"

set bmc_length 8
set bmc_loopback 1
check_ltlspec_bmc_onepb -p "!G F y=2"

echo Checking of true invariant "y in (0..12)" ...
check_invar_bmc -p "y in (0..12)"
echo Checking of true invariant "y in (0..7)" ...
check_invar_bmc -p "y in (0..7)"
echo Checking of false invariant "y in (0..6)" ...
check_invar_bmc -p "y in (0..6)"

echo Using BDD invariant checker to resolve ambiguity...
go
check_invar -p "y in (0..12)"
check_invar -p "y in (0..6)"




